name: C++ Devcontainer CI

on:
    push:
        branches:
            - main
            - vscode-dev-container
        paths:
            - 'src/**'
            - '.devcontainer/**'
            - '.github/workflows/podman-ci.yml'
    pull_request:
        paths:
            - 'src/**'
            - '.devcontainer/**'
            - '.github/workflows/podman-ci.yml'
jobs:
    # Stage 1: Build
    build:
        name: Build the Code
        runs-on: ubuntu-latest
        steps:
            # Step 1: Checkout the repo
            - name: Checkout code
              uses: actions/checkout@v4
            
            # Step 2: Install Podman
            - name: Install Podman
              run: |
                sudo apt-get update
                sudo apt-get install -y podman
            
            # Step 3: Verify Podman installation
            - name: Check Podman Version
              run: podman --version
            
            # Step 4: Build the container
            - name: Build Container
              run: | 
                cd .devcontainer
                podman build -f Dockerfile -t cpp-devcontainer .
            
            # Step 5: Run the Container to Build Executable
            - name: Create and Run Container
              run: |
                podman create \
                  --name cpp-ci-container \
                  --volume "$(pwd)/..:/workspaces/podman-ci-demo:Z" \
                  cpp-devcontainer /bin/bash -c "pwd"
                podman start cpp-ci-container --attach
            
            # Step 6: Extract the executable file as an artifact
            # This is not needed anymore since we mount a volume
            # - name: Extract Artifacts
            #   if: success()
            #   run: podman cp cpp-ci-container:/workspaces/podman-ci-demo/main ./main

            # Step 7: Upload artifact to GitHub
            - name: Upload Executable
              if: success()
              uses: actions/upload-artifact@v4
              with:
                name: hello-executable
                path: ../main
            
            # Step 8: Remove Container in case it is running on a self-hosted runner
            - name: Remove Container
              if: always()
              # || true is to ensure it doesn't fail if there is no image
              run: podman rm cpp-ci-container || true

    # Stage 2: Test the binary
    test:
        name: Test the Binary
        runs-on: ubuntu-latest
        needs: build
        steps:
            # Step 1: Download the artifact created by the build stage
            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                name: hello-executable

            # Step 2: Set executable permissions
            - name: Make executable
              run: chmod +x ./main

            # Step 2: Run the binary to verify that it returns 0
            - name: Run the Binary
              run: ./main

    # Separate stage for code formatting
    format-check:
        name: Code Format Check
        runs-on: ubuntu-latest
        steps:
            # Step 1: Checkout the code
            - name: Checkout code
              uses: actions/checkout@v4
            # Step 2: Run clang-format check
            - name: Check Code Formatting
              run: |
                pwd
                ls -a
                clang-format -i src/*.cpp
                git diff --exit-code || (echo "Code formatting issues found. Run clang-format to fix." && exit 1)
          